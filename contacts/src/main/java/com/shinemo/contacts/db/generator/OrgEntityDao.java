package com.shinemo.contacts.db.generator;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.shinemo.contacts.db.entity.OrgEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORG_ENTITY".
*/
public class OrgEntityDao extends AbstractDao<OrgEntity, Long> {

    public static final String TABLENAME = "ORG_ENTITY";

    /**
     * Properties of entity OrgEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "ID");
        public final static Property Avatar = new Property(1, String.class, "avatar", false, "AVATAR");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property UserType = new Property(3, int.class, "userType", false, "USER_TYPE");
        public final static Property CustomerManager = new Property(4, String.class, "customerManager", false, "CUSTOMER_MANAGER");
        public final static Property CustomerManagerPhone = new Property(5, String.class, "customerManagerPhone", false, "CUSTOMER_MANAGER_PHONE");
        public final static Property UserVersion = new Property(6, long.class, "userVersion", false, "USER_VERSION");
        public final static Property IsAuth = new Property(7, boolean.class, "isAuth", false, "IS_AUTH");
    }


    public OrgEntityDao(DaoConfig config) {
        super(config);
    }
    
    public OrgEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORG_ENTITY\" (" + //
                "\"ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"AVATAR\" TEXT," + // 1: avatar
                "\"NAME\" TEXT," + // 2: name
                "\"USER_TYPE\" INTEGER NOT NULL ," + // 3: userType
                "\"CUSTOMER_MANAGER\" TEXT," + // 4: customerManager
                "\"CUSTOMER_MANAGER_PHONE\" TEXT," + // 5: customerManagerPhone
                "\"USER_VERSION\" INTEGER NOT NULL ," + // 6: userVersion
                "\"IS_AUTH\" INTEGER NOT NULL );"); // 7: isAuth
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORG_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OrgEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(2, avatar);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getUserType());
 
        String customerManager = entity.getCustomerManager();
        if (customerManager != null) {
            stmt.bindString(5, customerManager);
        }
 
        String customerManagerPhone = entity.getCustomerManagerPhone();
        if (customerManagerPhone != null) {
            stmt.bindString(6, customerManagerPhone);
        }
        stmt.bindLong(7, entity.getUserVersion());
        stmt.bindLong(8, entity.getIsAuth() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OrgEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(2, avatar);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getUserType());
 
        String customerManager = entity.getCustomerManager();
        if (customerManager != null) {
            stmt.bindString(5, customerManager);
        }
 
        String customerManagerPhone = entity.getCustomerManagerPhone();
        if (customerManagerPhone != null) {
            stmt.bindString(6, customerManagerPhone);
        }
        stmt.bindLong(7, entity.getUserVersion());
        stmt.bindLong(8, entity.getIsAuth() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public OrgEntity readEntity(Cursor cursor, int offset) {
        OrgEntity entity = new OrgEntity( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // avatar
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.getInt(offset + 3), // userType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // customerManager
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // customerManagerPhone
            cursor.getLong(offset + 6), // userVersion
            cursor.getShort(offset + 7) != 0 // isAuth
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OrgEntity entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setAvatar(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserType(cursor.getInt(offset + 3));
        entity.setCustomerManager(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCustomerManagerPhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserVersion(cursor.getLong(offset + 6));
        entity.setIsAuth(cursor.getShort(offset + 7) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OrgEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OrgEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OrgEntity entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
