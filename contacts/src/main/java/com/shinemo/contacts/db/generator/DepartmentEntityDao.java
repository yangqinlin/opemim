package com.shinemo.contacts.db.generator;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.shinemo.contacts.db.entity.DepartmentEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEPARTMENT_ENTITY".
*/
public class DepartmentEntityDao extends AbstractDao<DepartmentEntity, Long> {

    public static final String TABLENAME = "DEPARTMENT_ENTITY";

    /**
     * Properties of entity DepartmentEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OrgId = new Property(1, long.class, "orgId", false, "ORG_ID");
        public final static Property DepartmentId = new Property(2, long.class, "departmentId", false, "DEPARTMENT_ID");
        public final static Property ParentId = new Property(3, long.class, "parentId", false, "PARENT_ID");
        public final static Property UserCounts = new Property(4, long.class, "userCounts", false, "USER_COUNTS");
        public final static Property Sequence = new Property(5, int.class, "sequence", false, "SEQUENCE");
        public final static Property Name = new Property(6, String.class, "name", false, "NAME");
        public final static Property Description = new Property(7, String.class, "description", false, "DESCRIPTION");
        public final static Property ParentIds = new Property(8, String.class, "parentIds", false, "PARENT_IDS");
        public final static Property OrgName = new Property(9, String.class, "orgName", false, "ORG_NAME");
        public final static Property Version = new Property(10, long.class, "version", false, "VERSION");
    }

    private DaoSession daoSession;


    public DepartmentEntityDao(DaoConfig config) {
        super(config);
    }
    
    public DepartmentEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEPARTMENT_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ORG_ID\" INTEGER NOT NULL ," + // 1: orgId
                "\"DEPARTMENT_ID\" INTEGER NOT NULL ," + // 2: departmentId
                "\"PARENT_ID\" INTEGER NOT NULL ," + // 3: parentId
                "\"USER_COUNTS\" INTEGER NOT NULL ," + // 4: userCounts
                "\"SEQUENCE\" INTEGER NOT NULL ," + // 5: sequence
                "\"NAME\" TEXT," + // 6: name
                "\"DESCRIPTION\" TEXT," + // 7: description
                "\"PARENT_IDS\" TEXT," + // 8: parentIds
                "\"ORG_NAME\" TEXT," + // 9: orgName
                "\"VERSION\" INTEGER NOT NULL );"); // 10: version
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_DEPARTMENT_ENTITY_ORG_ID ON DEPARTMENT_ENTITY" +
                " (\"ORG_ID\" ASC);");
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_DEPARTMENT_ENTITY_DEPARTMENT_ID_ORG_ID ON DEPARTMENT_ENTITY" +
                " (\"DEPARTMENT_ID\" ASC,\"ORG_ID\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_DEPARTMENT_ENTITY_PARENT_ID_ORG_ID ON DEPARTMENT_ENTITY" +
                " (\"PARENT_ID\" ASC,\"ORG_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEPARTMENT_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DepartmentEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getOrgId());
        stmt.bindLong(3, entity.getDepartmentId());
        stmt.bindLong(4, entity.getParentId());
        stmt.bindLong(5, entity.getUserCounts());
        stmt.bindLong(6, entity.getSequence());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(8, description);
        }
 
        String parentIds = entity.getParentIds();
        if (parentIds != null) {
            stmt.bindString(9, parentIds);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(10, orgName);
        }
        stmt.bindLong(11, entity.getVersion());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DepartmentEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getOrgId());
        stmt.bindLong(3, entity.getDepartmentId());
        stmt.bindLong(4, entity.getParentId());
        stmt.bindLong(5, entity.getUserCounts());
        stmt.bindLong(6, entity.getSequence());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(8, description);
        }
 
        String parentIds = entity.getParentIds();
        if (parentIds != null) {
            stmt.bindString(9, parentIds);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(10, orgName);
        }
        stmt.bindLong(11, entity.getVersion());
    }

    @Override
    protected final void attachEntity(DepartmentEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DepartmentEntity readEntity(Cursor cursor, int offset) {
        DepartmentEntity entity = new DepartmentEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // orgId
            cursor.getLong(offset + 2), // departmentId
            cursor.getLong(offset + 3), // parentId
            cursor.getLong(offset + 4), // userCounts
            cursor.getInt(offset + 5), // sequence
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // description
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // parentIds
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // orgName
            cursor.getLong(offset + 10) // version
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DepartmentEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrgId(cursor.getLong(offset + 1));
        entity.setDepartmentId(cursor.getLong(offset + 2));
        entity.setParentId(cursor.getLong(offset + 3));
        entity.setUserCounts(cursor.getLong(offset + 4));
        entity.setSequence(cursor.getInt(offset + 5));
        entity.setName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDescription(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setParentIds(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setOrgName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setVersion(cursor.getLong(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DepartmentEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DepartmentEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DepartmentEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
