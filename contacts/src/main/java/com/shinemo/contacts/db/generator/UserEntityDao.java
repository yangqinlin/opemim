package com.shinemo.contacts.db.generator;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.shinemo.contacts.db.entity.UserEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_ENTITY".
*/
public class UserEntityDao extends AbstractDao<UserEntity, Void> {

    public static final String TABLENAME = "USER_ENTITY";

    /**
     * Properties of entity UserEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Uid = new Property(0, String.class, "uid", false, "UID");
        public final static Property OrgId = new Property(1, long.class, "orgId", false, "ORG_ID");
        public final static Property DepartmentId = new Property(2, long.class, "departmentId", false, "DEPARTMENT_ID");
        public final static Property Sequence = new Property(3, int.class, "sequence", false, "SEQUENCE");
        public final static Property Mobile = new Property(4, String.class, "mobile", false, "MOBILE");
        public final static Property Title = new Property(5, String.class, "title", false, "TITLE");
        public final static Property Name = new Property(6, String.class, "name", false, "NAME");
        public final static Property Pinyin = new Property(7, String.class, "pinyin", false, "PINYIN");
        public final static Property Sex = new Property(8, int.class, "sex", false, "SEX");
        public final static Property Email = new Property(9, String.class, "email", false, "EMAIL");
        public final static Property HomePhone = new Property(10, String.class, "homePhone", false, "HOME_PHONE");
        public final static Property PersonalCellPhone = new Property(11, String.class, "personalCellPhone", false, "PERSONAL_CELL_PHONE");
        public final static Property ShortNum = new Property(12, String.class, "shortNum", false, "SHORT_NUM");
        public final static Property ShortNum2 = new Property(13, String.class, "shortNum2", false, "SHORT_NUM2");
        public final static Property WorkPhone = new Property(14, String.class, "workPhone", false, "WORK_PHONE");
        public final static Property WorkPhone2 = new Property(15, String.class, "workPhone2", false, "WORK_PHONE2");
        public final static Property VirtualCellPhone = new Property(16, String.class, "virtualCellPhone", false, "VIRTUAL_CELL_PHONE");
        public final static Property Remark = new Property(17, String.class, "remark", false, "REMARK");
        public final static Property IsAllowLogin = new Property(18, boolean.class, "isAllowLogin", false, "IS_ALLOW_LOGIN");
        public final static Property VirtualCode = new Property(19, String.class, "virtualCode", false, "VIRTUAL_CODE");
        public final static Property Fax = new Property(20, String.class, "fax", false, "FAX");
        public final static Property ShortPinyin = new Property(21, String.class, "shortPinyin", false, "SHORT_PINYIN");
        public final static Property CustomField = new Property(22, String.class, "customField", false, "CUSTOM_FIELD");
        public final static Property Privilege = new Property(23, String.class, "privilege", false, "PRIVILEGE");
        public final static Property OrgName = new Property(24, String.class, "orgName", false, "ORG_NAME");
        public final static Property IsLogin = new Property(25, boolean.class, "isLogin", false, "IS_LOGIN");
    }

    private DaoSession daoSession;


    public UserEntityDao(DaoConfig config) {
        super(config);
    }
    
    public UserEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_ENTITY\" (" + //
                "\"UID\" TEXT," + // 0: uid
                "\"ORG_ID\" INTEGER NOT NULL ," + // 1: orgId
                "\"DEPARTMENT_ID\" INTEGER NOT NULL ," + // 2: departmentId
                "\"SEQUENCE\" INTEGER NOT NULL ," + // 3: sequence
                "\"MOBILE\" TEXT," + // 4: mobile
                "\"TITLE\" TEXT," + // 5: title
                "\"NAME\" TEXT," + // 6: name
                "\"PINYIN\" TEXT," + // 7: pinyin
                "\"SEX\" INTEGER NOT NULL ," + // 8: sex
                "\"EMAIL\" TEXT," + // 9: email
                "\"HOME_PHONE\" TEXT," + // 10: homePhone
                "\"PERSONAL_CELL_PHONE\" TEXT," + // 11: personalCellPhone
                "\"SHORT_NUM\" TEXT," + // 12: shortNum
                "\"SHORT_NUM2\" TEXT," + // 13: shortNum2
                "\"WORK_PHONE\" TEXT," + // 14: workPhone
                "\"WORK_PHONE2\" TEXT," + // 15: workPhone2
                "\"VIRTUAL_CELL_PHONE\" TEXT," + // 16: virtualCellPhone
                "\"REMARK\" TEXT," + // 17: remark
                "\"IS_ALLOW_LOGIN\" INTEGER NOT NULL ," + // 18: isAllowLogin
                "\"VIRTUAL_CODE\" TEXT," + // 19: virtualCode
                "\"FAX\" TEXT," + // 20: fax
                "\"SHORT_PINYIN\" TEXT," + // 21: shortPinyin
                "\"CUSTOM_FIELD\" TEXT," + // 22: customField
                "\"PRIVILEGE\" TEXT," + // 23: privilege
                "\"ORG_NAME\" TEXT," + // 24: orgName
                "\"IS_LOGIN\" INTEGER NOT NULL );"); // 25: isLogin
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_USER_ENTITY_UID ON USER_ENTITY" +
                " (\"UID\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_USER_ENTITY_ORG_ID ON USER_ENTITY" +
                " (\"ORG_ID\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_USER_ENTITY_MOBILE ON USER_ENTITY" +
                " (\"MOBILE\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_USER_ENTITY_NAME ON USER_ENTITY" +
                " (\"NAME\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_USER_ENTITY_EMAIL ON USER_ENTITY" +
                " (\"EMAIL\" ASC);");
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_USER_ENTITY_UID_DEPARTMENT_ID_ORG_ID ON USER_ENTITY" +
                " (\"UID\" ASC,\"DEPARTMENT_ID\" ASC,\"ORG_ID\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_USER_ENTITY_DEPARTMENT_ID_ORG_ID ON USER_ENTITY" +
                " (\"DEPARTMENT_ID\" ASC,\"ORG_ID\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_USER_ENTITY_UID_ORG_ID ON USER_ENTITY" +
                " (\"UID\" ASC,\"ORG_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserEntity entity) {
        stmt.clearBindings();
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(1, uid);
        }
        stmt.bindLong(2, entity.getOrgId());
        stmt.bindLong(3, entity.getDepartmentId());
        stmt.bindLong(4, entity.getSequence());
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(5, mobile);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(8, pinyin);
        }
        stmt.bindLong(9, entity.getSex());
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(10, email);
        }
 
        String homePhone = entity.getHomePhone();
        if (homePhone != null) {
            stmt.bindString(11, homePhone);
        }
 
        String personalCellPhone = entity.getPersonalCellPhone();
        if (personalCellPhone != null) {
            stmt.bindString(12, personalCellPhone);
        }
 
        String shortNum = entity.getShortNum();
        if (shortNum != null) {
            stmt.bindString(13, shortNum);
        }
 
        String shortNum2 = entity.getShortNum2();
        if (shortNum2 != null) {
            stmt.bindString(14, shortNum2);
        }
 
        String workPhone = entity.getWorkPhone();
        if (workPhone != null) {
            stmt.bindString(15, workPhone);
        }
 
        String workPhone2 = entity.getWorkPhone2();
        if (workPhone2 != null) {
            stmt.bindString(16, workPhone2);
        }
 
        String virtualCellPhone = entity.getVirtualCellPhone();
        if (virtualCellPhone != null) {
            stmt.bindString(17, virtualCellPhone);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(18, remark);
        }
        stmt.bindLong(19, entity.getIsAllowLogin() ? 1L: 0L);
 
        String virtualCode = entity.getVirtualCode();
        if (virtualCode != null) {
            stmt.bindString(20, virtualCode);
        }
 
        String fax = entity.getFax();
        if (fax != null) {
            stmt.bindString(21, fax);
        }
 
        String shortPinyin = entity.getShortPinyin();
        if (shortPinyin != null) {
            stmt.bindString(22, shortPinyin);
        }
 
        String customField = entity.getCustomField();
        if (customField != null) {
            stmt.bindString(23, customField);
        }
 
        String privilege = entity.getPrivilege();
        if (privilege != null) {
            stmt.bindString(24, privilege);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(25, orgName);
        }
        stmt.bindLong(26, entity.getIsLogin() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserEntity entity) {
        stmt.clearBindings();
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(1, uid);
        }
        stmt.bindLong(2, entity.getOrgId());
        stmt.bindLong(3, entity.getDepartmentId());
        stmt.bindLong(4, entity.getSequence());
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(5, mobile);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(8, pinyin);
        }
        stmt.bindLong(9, entity.getSex());
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(10, email);
        }
 
        String homePhone = entity.getHomePhone();
        if (homePhone != null) {
            stmt.bindString(11, homePhone);
        }
 
        String personalCellPhone = entity.getPersonalCellPhone();
        if (personalCellPhone != null) {
            stmt.bindString(12, personalCellPhone);
        }
 
        String shortNum = entity.getShortNum();
        if (shortNum != null) {
            stmt.bindString(13, shortNum);
        }
 
        String shortNum2 = entity.getShortNum2();
        if (shortNum2 != null) {
            stmt.bindString(14, shortNum2);
        }
 
        String workPhone = entity.getWorkPhone();
        if (workPhone != null) {
            stmt.bindString(15, workPhone);
        }
 
        String workPhone2 = entity.getWorkPhone2();
        if (workPhone2 != null) {
            stmt.bindString(16, workPhone2);
        }
 
        String virtualCellPhone = entity.getVirtualCellPhone();
        if (virtualCellPhone != null) {
            stmt.bindString(17, virtualCellPhone);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(18, remark);
        }
        stmt.bindLong(19, entity.getIsAllowLogin() ? 1L: 0L);
 
        String virtualCode = entity.getVirtualCode();
        if (virtualCode != null) {
            stmt.bindString(20, virtualCode);
        }
 
        String fax = entity.getFax();
        if (fax != null) {
            stmt.bindString(21, fax);
        }
 
        String shortPinyin = entity.getShortPinyin();
        if (shortPinyin != null) {
            stmt.bindString(22, shortPinyin);
        }
 
        String customField = entity.getCustomField();
        if (customField != null) {
            stmt.bindString(23, customField);
        }
 
        String privilege = entity.getPrivilege();
        if (privilege != null) {
            stmt.bindString(24, privilege);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(25, orgName);
        }
        stmt.bindLong(26, entity.getIsLogin() ? 1L: 0L);
    }

    @Override
    protected final void attachEntity(UserEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public UserEntity readEntity(Cursor cursor, int offset) {
        UserEntity entity = new UserEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // uid
            cursor.getLong(offset + 1), // orgId
            cursor.getLong(offset + 2), // departmentId
            cursor.getInt(offset + 3), // sequence
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mobile
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // title
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // pinyin
            cursor.getInt(offset + 8), // sex
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // email
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // homePhone
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // personalCellPhone
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // shortNum
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // shortNum2
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // workPhone
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // workPhone2
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // virtualCellPhone
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // remark
            cursor.getShort(offset + 18) != 0, // isAllowLogin
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // virtualCode
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // fax
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // shortPinyin
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // customField
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // privilege
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // orgName
            cursor.getShort(offset + 25) != 0 // isLogin
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserEntity entity, int offset) {
        entity.setUid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setOrgId(cursor.getLong(offset + 1));
        entity.setDepartmentId(cursor.getLong(offset + 2));
        entity.setSequence(cursor.getInt(offset + 3));
        entity.setMobile(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPinyin(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSex(cursor.getInt(offset + 8));
        entity.setEmail(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setHomePhone(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPersonalCellPhone(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setShortNum(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setShortNum2(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setWorkPhone(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setWorkPhone2(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setVirtualCellPhone(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setRemark(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setIsAllowLogin(cursor.getShort(offset + 18) != 0);
        entity.setVirtualCode(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setFax(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setShortPinyin(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setCustomField(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setPrivilege(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setOrgName(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setIsLogin(cursor.getShort(offset + 25) != 0);
     }
    
    @Override
    protected final Void updateKeyAfterInsert(UserEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(UserEntity entity) {
        return null;
    }

    @Override
    public boolean hasKey(UserEntity entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
